{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usama.Shafique\\\\Downloads\\\\aws-labs-prototype\\\\src\\\\LabInterface.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Terminal } from 'xterm';\nimport 'xterm/css/xterm.css';\nimport './LabInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LabInterface = ({\n  labId\n}) => {\n  _s();\n  const [instructions, setInstructions] = useState('');\n  const [credentials, setCredentials] = useState(null);\n  const terminalRef = useRef(null);\n  const term = useRef(null);\n\n  // Mock API response (replace with real axios call to backend in production)\n  const mockLabData = {\n    instructions: `# Lab 1: Launch an EC2 Instance\\n\\n## Objective\\nLearn to launch an EC2 instance using AWS CLI.\\n\\n## Step 1: Configure AWS CLI\\nRun: \\`aws configure\\`\\nEnter the provided credentials.\\n\\n## Step 2: Launch Instance\\n\\`aws ec2 run-instances --image-id ami-12345678 --instance-type t2.micro\\`\\n\\n## Expected Output\\nA JSON response with instance details.\\n\\n## Step 3: Verify\\nCheck running instances:\\n\\`aws ec2 describe-instances\\``,\n    credentials: {\n      accessKeyId: 'AKIAIOSFODNN7EXAMPLE',\n      secretAccessKey: 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY',\n      sessionToken: 'AQoDYXdzEPT//////////wEXAMPLESESSIONTOKEN'\n    }\n  };\n\n  // Initialize terminal\n  useEffect(() => {\n    term.current = new Terminal({\n      cursorBlink: true,\n      theme: {\n        background: '#1e1e1e',\n        foreground: '#ffffff'\n      }\n    });\n    term.current.open(terminalRef.current);\n    term.current.write('Welcome to the AWS Lab Terminal. Configure AWS CLI with provided credentials.\\r\\n');\n    term.current.onData(data => {\n      term.current.write(data); // Echo input (simulated)\n    });\n    return () => term.current.dispose();\n  }, []);\n\n  // Load mock data\n  useEffect(() => {\n    // Simulate API fetch\n    setInstructions(mockLabData.instructions);\n    setCredentials(mockLabData.credentials);\n    if (mockLabData.credentials) {\n      term.current.write(`AWS Credentials:\\nAccess Key ID: ${mockLabData.credentials.accessKeyId}\\n` + `Secret Access Key: ${mockLabData.credentials.secretAccessKey}\\n` + `Session Token: ${mockLabData.credentials.sessionToken}\\n` + 'Run `aws configure` to set up.\\r\\n');\n    }\n  }, [labId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lab-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"instructions-panel\",\n      children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n        children: instructions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-panel\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: terminalRef,\n        className: \"terminal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(LabInterface, \"w23BK3KTpKpENt7fhPm7nQEfUzk=\");\n_c = LabInterface;\nexport default LabInterface;\nvar _c;\n$RefreshReg$(_c, \"LabInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ReactMarkdown","Terminal","jsxDEV","_jsxDEV","LabInterface","labId","_s","instructions","setInstructions","credentials","setCredentials","terminalRef","term","mockLabData","accessKeyId","secretAccessKey","sessionToken","current","cursorBlink","theme","background","foreground","open","write","onData","data","dispose","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/Usama.Shafique/Downloads/aws-labs-prototype/src/LabInterface.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Terminal } from 'xterm';\nimport 'xterm/css/xterm.css';\nimport './LabInterface.css';\n\nconst LabInterface = ({ labId }) => {\n  const [instructions, setInstructions] = useState('');\n  const [credentials, setCredentials] = useState(null);\n  const terminalRef = useRef(null);\n  const term = useRef(null);\n\n  // Mock API response (replace with real axios call to backend in production)\n  const mockLabData = {\n    instructions: `# Lab 1: Launch an EC2 Instance\\n\\n## Objective\\nLearn to launch an EC2 instance using AWS CLI.\\n\\n## Step 1: Configure AWS CLI\\nRun: \\`aws configure\\`\\nEnter the provided credentials.\\n\\n## Step 2: Launch Instance\\n\\`aws ec2 run-instances --image-id ami-12345678 --instance-type t2.micro\\`\\n\\n## Expected Output\\nA JSON response with instance details.\\n\\n## Step 3: Verify\\nCheck running instances:\\n\\`aws ec2 describe-instances\\``,\n    credentials: {\n      accessKeyId: 'AKIAIOSFODNN7EXAMPLE',\n      secretAccessKey: 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY',\n      sessionToken: 'AQoDYXdzEPT//////////wEXAMPLESESSIONTOKEN'\n    }\n  };\n\n  // Initialize terminal\n  useEffect(() => {\n    term.current = new Terminal({\n      cursorBlink: true,\n      theme: { background: '#1e1e1e', foreground: '#ffffff' },\n    });\n    term.current.open(terminalRef.current);\n    term.current.write('Welcome to the AWS Lab Terminal. Configure AWS CLI with provided credentials.\\r\\n');\n    term.current.onData((data) => {\n      term.current.write(data); // Echo input (simulated)\n    });\n\n    return () => term.current.dispose();\n  }, []);\n\n  // Load mock data\n  useEffect(() => {\n    // Simulate API fetch\n    setInstructions(mockLabData.instructions);\n    setCredentials(mockLabData.credentials);\n    if (mockLabData.credentials) {\n      term.current.write(\n        `AWS Credentials:\\nAccess Key ID: ${mockLabData.credentials.accessKeyId}\\n` +\n        `Secret Access Key: ${mockLabData.credentials.secretAccessKey}\\n` +\n        `Session Token: ${mockLabData.credentials.sessionToken}\\n` +\n        'Run `aws configure` to set up.\\r\\n'\n      );\n    }\n  }, [labId]);\n\n  return (\n    <div className=\"lab-container\">\n      <div className=\"instructions-panel\">\n        <ReactMarkdown>{instructions}</ReactMarkdown>\n      </div>\n      <div className=\"terminal-panel\">\n        <div ref={terminalRef} className=\"terminal\" />\n      </div>\n    </div>\n  );\n};\n\nexport default LabInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}